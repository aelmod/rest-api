// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Webtor Support",
            "url": "https://webtor.io/support",
            "email": "support@webtor.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/resource/": {
            "post": {
                "description": "Receives torrent or magnet-uri in request body.\nIf magnet-uri provided instead of torrent, then it tries to fetch torrent from BitTorrent network (timeout 3 minutes).",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resource"
                ],
                "summary": "Stores resource",
                "parameters": [
                    {
                        "example": "\"magnet:?xt=urn:btih:08ada5a7a6183aae1e09d831df6748d566095a10\u0026dn=Sintel\u0026tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969\u0026tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969\u0026tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337\u0026tr=udp%3A%2F%2Fexplodie.org%3A6969\u0026tr=udp%3A%2F%2Ftracker.empire-js.us%3A1337\u0026tr=wss%3A%2F%2Ftracker.btorrent.xyz\u0026tr=wss%3A%2F%2Ftracker.openwebtorrent.com\u0026tr=wss%3A%2F%2Ftracker.fastcast.nz\u0026ws=https%3A%2F%2Fwebtorrent.io%2Ftorrents%2F\"",
                        "description": "resource",
                        "name": "resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.ResourceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/resource/{resource_id}": {
            "get": {
                "description": "Receives resource id and returns resource.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "resource"
                ],
                "summary": "Returns resource",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"08ada5a7a6183aae1e09d831df6748d566095a10\"",
                        "description": "resource_id",
                        "name": "resource_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.ResourceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/resource/{resource_id}.torrent": {
            "get": {
                "description": "Receives id and returns torrent for resource.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/x-bittorrent"
                ],
                "tags": [
                    "resource"
                ],
                "summary": "Returns torrent for resource",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"08ada5a7a6183aae1e09d831df6748d566095a10\"",
                        "description": "resource_id",
                        "name": "resource_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.ResourceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/resource/{resource_id}/export/{content_id}": {
            "get": {
                "description": "Provides url for exporting resource content.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "export"
                ],
                "summary": "Exports resource content",
                "parameters": [
                    {
                        "enum": [
                            "download",
                            "stream",
                            "torrent_client_stat",
                            "subtitles",
                            "media_probe"
                        ],
                        "type": "string",
                        "description": "output",
                        "name": "output",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"08ada5a7a6183aae1e09d831df6748d566095a10\"",
                        "description": "resource_id",
                        "name": "resource_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"ca2453df3e7691c28934eebed5a253ee0aabd29f\"",
                        "description": "content_id",
                        "name": "content_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.ExportResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/resource/{resource_id}/list": {
            "get": {
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "list"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "path",
                        "name": "path",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "list",
                            "tree"
                        ],
                        "type": "string",
                        "description": "output",
                        "name": "output",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.ListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/services.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "services.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "services.ExportItem": {
            "type": "object",
            "properties": {
                "html_tag": {
                    "$ref": "#/definitions/services.ExportTag"
                },
                "meta": {
                    "$ref": "#/definitions/services.ExportMeta"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "services.ExportKindType": {
            "type": "string",
            "enum": [
                "subtitles"
            ],
            "x-enum-varnames": [
                "ExportKindTypeSubtitles"
            ]
        },
        "services.ExportMeta": {
            "type": "object",
            "properties": {
                "cache": {
                    "type": "boolean"
                },
                "multibitrate": {
                    "type": "boolean"
                },
                "transcode": {
                    "type": "boolean"
                },
                "transcode_cache": {
                    "type": "boolean"
                }
            }
        },
        "services.ExportPreloadType": {
            "type": "string",
            "enum": [
                "auto",
                "none"
            ],
            "x-enum-varnames": [
                "ExportPreloadTypeAuto",
                "ExportPreloadTypeNone"
            ]
        },
        "services.ExportResponse": {
            "type": "object",
            "properties": {
                "exports": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/services.ExportItem"
                    }
                },
                "source": {
                    "$ref": "#/definitions/services.ListItem"
                }
            }
        },
        "services.ExportSource": {
            "type": "object",
            "properties": {
                "src": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "services.ExportTag": {
            "type": "object",
            "properties": {
                "alt": {
                    "type": "string"
                },
                "poster": {
                    "type": "string"
                },
                "preload": {
                    "$ref": "#/definitions/services.ExportPreloadType"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.ExportSource"
                    }
                },
                "src": {
                    "type": "string"
                },
                "tag": {
                    "$ref": "#/definitions/services.ExportTagName"
                },
                "tracks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.ExportTrack"
                    }
                }
            }
        },
        "services.ExportTagName": {
            "type": "string",
            "enum": [
                "video",
                "audio",
                "img"
            ],
            "x-enum-varnames": [
                "ExportTagNameVideo",
                "ExportTagNameAudio",
                "ExportTagNameImage"
            ]
        },
        "services.ExportTrack": {
            "type": "object",
            "properties": {
                "kind": {
                    "$ref": "#/definitions/services.ExportKindType"
                },
                "label": {
                    "type": "string"
                },
                "src": {
                    "type": "string"
                },
                "srclang": {
                    "type": "string"
                }
            }
        },
        "services.ListItem": {
            "type": "object",
            "properties": {
                "ext": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "media_format": {
                    "$ref": "#/definitions/services.MediaFormat"
                },
                "mime_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/services.ListType"
                }
            }
        },
        "services.ListResponse": {
            "type": "object",
            "properties": {
                "ext": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.ListItem"
                    }
                },
                "items_count": {
                    "type": "integer"
                },
                "media_format": {
                    "$ref": "#/definitions/services.MediaFormat"
                },
                "mime_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/services.ListType"
                }
            }
        },
        "services.ListType": {
            "type": "string",
            "enum": [
                "file",
                "directory"
            ],
            "x-enum-varnames": [
                "ListTypeFile",
                "ListTypeDirectory"
            ]
        },
        "services.MediaFormat": {
            "type": "string",
            "enum": [
                "audio",
                "video",
                "image",
                "subtitle",
                "unknown"
            ],
            "x-enum-varnames": [
                "Audio",
                "Video",
                "Image",
                "Subtitle",
                "Unknown"
            ]
        },
        "services.ResourceResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "magnet_uri": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Webtor API",
	Description:      "Simple API to communicate with Webtor service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
